<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust The Book on 1日1時間</title>
    <link>https://i524.github.io/tags/rust-the-book/</link>
    <description>Recent content in Rust The Book on 1日1時間</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 22 Nov 2020 07:57:00 +0900</lastBuildDate><atom:link href="https://i524.github.io/tags/rust-the-book/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust のデータ型(The Book chapter 3.2)</title>
      <link>https://i524.github.io/blog/20201121-rust-data-types/</link>
      <pubDate>Sun, 22 Nov 2020 07:57:00 +0900</pubDate>
      
      <guid>https://i524.github.io/blog/20201121-rust-data-types/</guid>
      <description>資料  Data Types - The Rust Programming Language  Rust の型 Rust の型は Scalar と Compound に分類される
Scalar Types  Scalar は単一の値 Integer  signed/unsigned の 8, 16, 32, 64, 128 bit + システム（32bit OS なら 32bit, 64bit OS なら 64bit） signed 8bit なら i8, unsigned 64bit なら u64, システムは isize/usize リテラルの書き方:  数値の末尾に型を明記できる(57u8, -120i32) _ を間に入れて良い(1_000) 16進数(0xff) 8進数(0o77) 2進数(0b1111_0000) バイト（u8のみ）(b&#39;A&#39;)   迷ったら Rust デフォルトの i32 を使おう（64bitOS でも i32 のほうが高速）  isize/usize はコレクションのインデックス等で使う   オーバーフロー時の挙動はコンパイル時のモードで異なる  debug モードではその場で異常終了（panic） release モード（--release オプション）では wrap される:最大値を超えると最小値になる（u8 なら 255 + 1 は 0 になる）  明示的にこの挙動が欲しい場合は標準ライブラリの Wrapping を使おう       Float  f32 f64 がありデフォルトは f64  今のシステムでは計算速度はそれほど変わらず、 f64 のほうが精度高いため     Boolean  bool true/false   Character  char シングルクォートで囲う(&#39;z&#39;)（ダブルクォートは文字列） Rust の Character は4バイトなので emoji 等も表現できる U+0000 ~ U+D7FF, U+E000 ~ U+10FFFF に対応    Compound Types  Compound は複数の値を１つの型で表現するもの Tuple  複数の値をひとつの型としてまとめたもの それぞれ異なる型でも良い 長さを増やしたり減らしたりはできない destructuring ができる（以下） x.</description>
    </item>
    
    <item>
      <title>Rust の変数と定数(The Book chapter 3.1)</title>
      <link>https://i524.github.io/blog/20201118-rust-variables/</link>
      <pubDate>Wed, 18 Nov 2020 07:09:31 +0900</pubDate>
      
      <guid>https://i524.github.io/blog/20201118-rust-variables/</guid>
      <description>資料  Variables and Mutability - The Rust Programming Language  変数 fn main() { let x = 5; println!(&amp;#34;The value of x is: {}&amp;#34;, x); x = 6; // ^^^^^ cannot assign twice to immutable variable  println!(&amp;#34;The value of x is: {}&amp;#34;, x); }  let で immutable な変数宣言できる  書き換えようとするとコンパイルエラー   let mut で mutable な変数宣言できる  定数 const MAX_POINTS: u32 = 100_000;  const で定数宣言できる  型の明示が必須 名前は upper snake const mut は不可   グローバルスコープ含めどこにでも書ける ランタイムで決定される値は使えない  Shadowing fn main() { let x = 5; let x = x + 1; let x = x * 2; println!</description>
    </item>
    
    <item>
      <title>Rust で推測ゲーム(The Book chapter 2)</title>
      <link>https://i524.github.io/blog/20201110-rust-guessing-game/</link>
      <pubDate>Wed, 18 Nov 2020 06:57:09 +0900</pubDate>
      
      <guid>https://i524.github.io/blog/20201110-rust-guessing-game/</guid>
      <description>資料  Programming a Guessing Game - The Rust Programming Language  プロジェクト作成 $ cargo new guessing_game $ cd guessing_game $ cargo run Compiling guessing_game v0.1.0 (/path/to/guessing_game) Finished dev [unoptimized + debuginfo] target(s) in 4.29s Running `target/debug/guessing_game` Hello, world! 入力を受け付ける部分の作成 資料通りコードを書いていく
use std::io; fn main() { println!(&amp;#34;Guess the number!&amp;#34;); println!(&amp;#34;Please input your guess.&amp;#34;); let mut guess = String::new(); io::stdin() .read_line(&amp;amp;mut guess) .expect(&amp;#34;Failed to read line&amp;#34;); println!(&amp;#34;You guessed: {}&amp;#34;, guess); }  println!</description>
    </item>
    
    <item>
      <title>Rust のインストール(The Book chapter 1)</title>
      <link>https://i524.github.io/blog/20201110-installing-rust/</link>
      <pubDate>Tue, 10 Nov 2020 05:54:36 +0900</pubDate>
      
      <guid>https://i524.github.io/blog/20201110-installing-rust/</guid>
      <description>資料  Installation - The Rust Programming Language  brew install rustup-init rustup-init rustup-init [20:20:26] Welcome to Rust! This will download and install the official compiler for the Rust programming language, and its package manager, Cargo. Rustup metadata and toolchains will be installed into the Rustup home directory, located at: /Users/$USER/.rustup This can be modified with the RUSTUP_HOME environment variable. The Cargo home directory located at: /Users/$USER/.cargo This can be modified with the CARGO_HOME environment variable.</description>
    </item>
    
  </channel>
</rss>
